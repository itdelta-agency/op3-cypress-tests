
const { generateUserData } = require('../../support/fakerData');
const { JSDOM } = require("jsdom");




describe('Register Invalid', () => {
    let user;
    let inbox;

    before(() => {
        user = generateUserData();
        cy.wrap(user).then(u => {
            cy.task('logInfo', `Generated user: ${JSON.stringify(u, null, 2)}`);
        });
    });

    beforeEach(() => {
        cy.logTestName.call(this);
        cy.resetAppState();

        cy.task('getCachedInbox').then(result => {
            expect(result).to.exist;
            inbox = result;
            cy.log('Используем кешированный inbox:', inbox.emailAddress);
        });
        cy.visit(Cypress.config().registerUrl);
        cy.disableAnimations();
        cy.changeLangAuth('en');
    })

    it('Invalid-email_code-input', function () {

        cy.task('logStep', `Ввод почты`);
        cy.xpath("//input[@id='email']", { timeout: 10000 }).type(user.userEmail);
        cy.get('[data-test-id="submit_button"]', { timeout: 5000 }).should('be.visible');
        cy.task('logStep', `Клик по кнопке "Зарегистрироваться"`);
        cy.get('[data-test-id="submit_button"]').click();
        cy.xpath("//input[@id='code']", { timeout: 10000 }).clear().type(user.invalid_code);
        cy.get('[data-test-id="check_code_button"]', { timeout: 5000 }).should('be.visible');
        cy.task('logStep', `Клик по кнопке "Проверить код "`);
        cy.get('[data-test-id="check_code_button"]').click()
        cy.contains("Выбранное значение для Код некорректно.").should("be.visible");
        cy.task('logInfo', `Тест пройден!`);
    });

    it("change email", function () {

        cy.task('logStep', `Ввод почты`);
        cy.xpath("//input[@id='email']", { timeout: 10000 }).type(user.userEmail);
        cy.get('[data-test-id="submit_button"]', { timeout: 5000 }).should('be.visible');
        cy.task('logStep', `Клик по кнопке "Зарегистрироваться"`);
        cy.get('[data-test-id="submit_button"]').click();
        cy.task('logStep', `Клик по кнопке "Сменить почту"`);
        cy.get('[data-test-id="change_email_link"]').click();
        cy.url().should('include', '/register');
        cy.contains("Регистрация").should('be.visible')
        cy.task('logInfo', `Тест пройден!`);
    })

    it("invalid code flow", function () {
        cy.wait(25000);
        const testUser = generateUserData(); // получаем данные Faker
        cy.task('getCachedInbox').then(result => {
            expect(result).to.exist;
            const userEmail = result.emailAddress;
            cy.log('Используем кешированный inbox:', userEmail);

            cy.task('logStep', `Ввод почты`);
            cy.xpath("//input[@id='email']", { timeout: 10000 }).type(userEmail);
            cy.task('logStep', `Клик по кнопке "Зарегистрироваться"`);
            cy.get('[data-test-id="submit_button"]', { timeout: 5000 }).should('be.visible').click();

            // Проверяем, что письмо пришло
            cy.task('logStep', `Проверка кода верификации на почте `);
            cy.task('getLastEmail', { user: userEmail, pass: 'password', timeout: 60000 }).then(email => {
                if (!email) {
                    cy.task('logInfo', 'Письмо не пришло после первой отправки кода');
                    return;
                }
                const html = email.bodyHTML || email.body;
                const dom = new JSDOM(html);
                const doc = dom.window.document;
                const codeParagraph = doc.querySelector("p");
                // Извлекаем 4-значный код
                const actualCode = codeParagraph?.textContent.match(/\d{4}/)?.[0];
                cy.task('logInfo', `Код из письма после первой отправки: ${actualCode}`);
            });

            cy.task('logStep', `Ввод невалидного кода`);
            cy.xpath("//input[@id='code']", { timeout: 10000 }).clear().type(testUser.invalid_code);
            cy.task('logStep', `Клик по кнопке "Проверить код "`);
            cy.get('[data-test-id="check_code_button"]', { timeout: 5000 }).should('be.visible').click();
            // Проверяем сообщение об ошибке
            cy.contains("Выбранное значение для Код некорректно.").should("be.visible");
            cy.task('logStep', `Ожидание что кнопка "Отправить код повторно" станет доступна`);
            cy.get('[data-test-id="resend_code_button"]', { timeout: 65000 }).click();

            cy.task('logStep', `Проверка кода верификации на почте `);
            cy.task('getLastEmail', { user: userEmail, pass: 'password', timeout: 60000 }).then(email => {
                if (!email) {
                    cy.task('logInfo', 'Письмо не пришло после первой отправки кода');
                    return;
                }
                const html = email.bodyHTML || email.body;
                const dom = new JSDOM(html);
                const doc = dom.window.document;
                const codeParagraph = doc.querySelector("p");
                // Извлекаем 4-значный код
                const actualCode = codeParagraph?.textContent.match(/\d{4}/)?.[0];
                cy.task('logInfo', `Код из письма после первой отправки: ${actualCode}`);
            });

            cy.task('logStep', `Ввод невалидного кода`);
            cy.xpath("//input[@id='code']", { timeout: 10000 }).clear().type(testUser.invalid_code);
            cy.task('logStep', `Клик по кнопке "Проверить код "`);
            cy.get('[data-test-id="check_code_button"]', { timeout: 5000 }).should('be.visible').click();

            // Проверяем сообщение об ошибке повторно
            cy.contains("Выбранное значение для Код некорректно.").should("be.visible");
            cy.task('logStep', `Тест пройдет!`);
        });
    });

})