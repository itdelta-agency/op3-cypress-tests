const { ROUTES } = require("../../support/routes");
const { JSDOM } = require("jsdom");

describe("C. Invite user by 2 ways", () => {
  let link;

  // –ü–æ–ª—É—á–∞–µ–º inbox –æ–¥–∏–Ω —Ä–∞–∑ –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ —Ç–µ—Å—Ç–∞–º–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Cypress.env
  before(() => {
    cy.task('getCachedInbox').then(result => {
      expect(result).to.exist;
      Cypress.env('inbox', result);
      cy.log('üì¨ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π inbox:', result.emailAddress);
    });
  });

  beforeEach(function () {
    cy.logTestName.call(this);
    cy.resetAppState();
  });

  it('should invite by user menu', () => {
    const inbox = Cypress.env('inbox');
    expect(inbox).to.exist;

    cy.admin();
    // cy.changeLang(); // —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –º–µ–Ω—è—Ç—å —è–∑—ã–∫
    cy.visit(ROUTES.invite);

    cy.xpath("//input[@id='email']").type(inbox.emailAddress);
    cy.xpath("//button[@type='submit']").click();
  });

  it('getting last email', function () {
    const inbox = Cypress.env('inbox');

    if (!inbox) {
      cy.task('logError', 'Inbox –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–µ—Å—Ç –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è');
      return; // —Ç–µ—Å—Ç –Ω–µ –ø–∞–¥–∞–µ—Ç
    }

    cy.task('getLastEmail', { inboxId: inbox.id, timeout: 10000 }).then(email => {
      if (!email) {
        cy.task('logError', '–ü–∏—Å—å–º–æ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É');
        return; // —Ç–µ—Å—Ç –Ω–µ –ø–∞–¥–∞–µ—Ç
      }

      const html = email.bodyHTML || email.body;
      if (!html) {
        cy.task('logError', '–ü–∏—Å—å–º–æ –ø—Ä–∏—à–ª–æ, –Ω–æ —Ç–µ–ª–æ –ø–∏—Å—å–º–∞ –ø—É—Å—Ç–æ–µ');
        return;
      }

      const dom = new JSDOM(html);
      const doc = dom.window.document;

      const directLink = doc.querySelector('a.button.button-primary')?.href;
      const allLinks = Array.from(doc.querySelectorAll('a'));

      const fallbackLink = allLinks.find(a =>
        a.href.includes('/accept-invite') || a.textContent.toLowerCase().includes('accept')
      )?.href;

      const link = directLink || fallbackLink;
      cy.task('logInfo', `–ù–∞–π–¥–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞: ${link || '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
      this.confirmationLink = link;
    });
  });

  it('accept invitation', function () {
    link = this.confirmationLink;

    if (!link) {
      cy.task('logError', 'confirmation link –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥ accept invitation');
      return;
    }

    cy.visit(link);
    cy.task('logInfo', `–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é`);

    cy.wait(1000);
    cy.task('logStep', `–í–≤–æ–¥ –∏–º–µ–Ω–∏`);
    cy.xpath("//*[@id='first-name']").type('QA');
    cy.task('logStep', `–í–≤–æ–¥ —Ñ–º–∏–ª–∏–∏`);
    cy.xpath("//*[@id='last-name']").type('Test');
    cy.task('logStep', `–í–≤–æ–¥ –ø–∞—Ä–æ–ª—è`);
    cy.xpath("//*[@id='password']").type(Cypress.env('password'), { log: false });
    cy.task('logStep', `–í–≤–æ–¥ –ø–∞—Ä–æ–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ`);
    cy.xpath("//*[@id='new_password']").type(Cypress.env('password'), { log: false });
    cy.task('logStep', `–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ`);
    cy.xpath("(//button[@type='submit'])[1]").click();

    cy.checkTextInParagraph();

  });
});
