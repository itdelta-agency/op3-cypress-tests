const mailslurp = require('./mail-client');

async function getLastInboxByCreatedDate() {
  try {
    const created = await mailslurp.createInbox();
    console.log('createInbox –æ—Ç–≤–µ—Ç:', created);
    if (!created || !created.id) {
      throw new Error('createInbox –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π inbox');
    }
    console.log('–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π inbox:', created.emailAddress);
    return created;
  } catch (err) {
    console.warn(' –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å inbox:', err.message);

    try {
      const allInboxes = await mailslurp.getAllInboxes();
      console.log('–°–ø–∏—Å–æ–∫ inbox-–æ–≤:', allInboxes);
      const inboxes = allInboxes.content || [];

      if (!inboxes.length) {
        throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö inbox-–æ–≤ –≤ –∞–∫–∫–∞—É–Ω—Ç–µ MailSlurp.');
      }

      const sorted = inboxes.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
      const lastInbox = sorted[0];

      if (!lastInbox || !lastInbox.emailAddress) {
        throw new Error('–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π inbox –Ω–µ–≤–∞–ª–∏–¥–µ–Ω');
      }

      console.log('üì¨ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π inbox:', lastInbox.emailAddress);
      return lastInbox;
    } catch (e) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ inbox-–æ–≤:', e.message);
      return null; 
    }
  }
}

module.exports = getLastInboxByCreatedDate;